>>> def say_myself(name,old, man=True):
...     print("나의 이름은 %s입니다." %name)
...     print("나이는 %d살입니다." %old)
...     if man:
...             print("남자입니다.")
...     else:
...             print("여자입니다.")
...
>>> #매개변수에 미리 값을 넣어 준 것.
>>> say_myself("박응용",27)
나의 이름은 박응용입니다.
나이는 27살입니다.
남자입니다.
>>> say_myself("박응용",27,True)
나의 이름은 박응용입니다.
나이는 27살입니다.
남자입니다.
>>> say_myself("박응용",27,False)
나의 이름은 박응용입니다.
나이는 27살입니다.
여자입니다.
>>> #varest.py
>>> a=1
>>> def vartest(a):
...     a=a+1
...
>>> varest(a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'varest' is not defined
>>> vartest(a)
>>> print(a)
1
>>> #저 a랑 함수 안의 a는 다른 놈인 것이여!
>>> # 함수 안의 것만 같다.
>>> varest(3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'varest' is not defined
>>> print(a)
1
>>> #vartest_return.py
>>> a=1
>>> def vartest(a):
...     a=a+1
...     return a
...
>>> a= vartest(a)
>>> print(a)
2
>>> a=123
>>> print(a)
123
>>> def vartest(a):
...     a=a+1
...     retrun a
  File "<stdin>", line 3
    retrun a
           ^
SyntaxError: invalid syntax
>>> def vartest(a):
...     a=a+1
...     return a
...
>>> a=vartest(a)
>>> print(a)
124
>>> #vartest_global.py
>>> a=1
>>> def vartest():
...     global a
...     a=a+1
...
>>> vartest()
>>> print(a)
2
>>> #global은 밖에있는 걸 쓰겠다는 거지만 안쓰는게 좋음
>>> #lambda  #함수 생성 요약어
>>> add=lambda a,b: a+b
>>> result=add(3,4)
>>> print(result)
7
>>> #람다는 def 와 동일한 역할, 간결하게 혹은 def 못쓸때 씀
>>> a=input()
Life is too short, you need python
>>> a
'Life is too short, you need python'
>>> #input은 입력되는 모든 것을 문자열 취급
>>> number=input("숫자를 입력하세요: ")
숫자를 입력하세요: 123
>>> print(number)
123
>>> print("life""is""too short")
lifeistoo short
>>> #same with +
>>> #space bar = ,
>>> print("life","is","too short")
life is too short
>>>  for i in range (10):
  File "<stdin>", line 1
    for i in range (10):
IndentationError: unexpected indent
>>> for i in range (10):
...     print(i, end=' ')
...
0 1 2 3 4 5 6 7 8 9 >>>
>>> fir i in range(3,45):
  File "<stdin>", line 1
    fir i in range(3,45):
        ^
SyntaxError: invalid syntax
>>> for i in range(3,45):
...     print(i,end='')
...
34567891011121314151617181920212223242526272829303132333435363738394041424344>>>
